This file is a merged representation of the entire codebase, combined into a single document by Repomix.

================================================================
File Summary
================================================================

Purpose:
--------
This file contains a packed representation of the entire repository's contents.
It is designed to be easily consumable by AI systems for analysis, code review,
or other automated processes.

File Format:
------------
The content is organized as follows:
1. This summary section
2. Repository information
3. Directory structure
4. Multiple file entries, each consisting of:
  a. A separator line (================)
  b. The file path (File: path/to/file)
  c. Another separator line
  d. The full contents of the file
  e. A blank line

Usage Guidelines:
-----------------
- This file should be treated as read-only. Any changes should be made to the
  original repository files, not this packed version.
- When processing this file, use the file path to distinguish
  between different files in the repository.
- Be aware that this file may contain sensitive information. Handle it with
  the same level of security as you would the original repository.

Notes:
------
- Some files may have been excluded based on .gitignore rules and Repomix's configuration
- Binary files are not included in this packed representation. Please refer to the Repository Structure section for a complete list of file paths, including binary files
- Files matching patterns in .gitignore are excluded
- Files matching default ignore patterns are excluded

Additional Info:
----------------

================================================================
Directory Structure
================================================================
clevercloud/
  gradle.json
gradle/
  wrapper/
    gradle-wrapper.properties
src/
  main/
    java/
      com/
        emse/
          integrativecps2/
            config/
              WebSocketConfig.java
            controller/
              RuleController.java
              SensorController.java
              SensorRuleController.java
              WeatherController.java
              WeatherRuleController.java
            entity/
              Notification.java
              Rule.java
              SensorData.java
              SensorRule.java
              WeatherData.java
              WeatherRule.java
            model/
              RuleDto.java
              SensorDto.java
            repository/
              NotificationRepository.java
              RuleRepository.java
              SensorDataRepository.java
              SensorRuleRepository.java
              WeatherDataRepository.java
              WeatherRuleRepository.java
            service/
              NotificationService.java
              RuleService.java
              SensorRuleService.java
              SensorService.java
              TimerService.java
              WeatherRuleService.java
              WeatherService.java
            Integrativecps2Application.java
    resources/
      application.properties
  test/
    java/
      com/
        emse/
          integrativecps2/
            Integrativecps2ApplicationTests.java
.gitattributes
.gitignore
build.gradle.kts
gradlew
gradlew.bat
settings.gradle.kts

================================================================
Files
================================================================

================
File: clevercloud/gradle.json
================
{
    "build": {
        "type": "gradle",
        "goal": "assemble"
    },
    "deploy": {
        "jarName": "./build/libs/integrativecps2-0.0.1-SNAPSHOT.jar"
    }
}

================
File: gradle/wrapper/gradle-wrapper.properties
================
distributionBase=GRADLE_USER_HOME
distributionPath=wrapper/dists
distributionUrl=https\://services.gradle.org/distributions/gradle-8.12.1-bin.zip
networkTimeout=10000
validateDistributionUrl=true
zipStoreBase=GRADLE_USER_HOME
zipStorePath=wrapper/dists

================
File: src/main/java/com/emse/integrativecps2/config/WebSocketConfig.java
================
package com.emse.integrativecps2.config;

import org.springframework.context.annotation.Configuration;
import org.springframework.messaging.simp.config.MessageBrokerRegistry;
import org.springframework.web.socket.config.annotation.EnableWebSocketMessageBroker;
import org.springframework.web.socket.config.annotation.StompEndpointRegistry;
import org.springframework.web.socket.config.annotation.WebSocketMessageBrokerConfigurer;

@Configuration
@EnableWebSocketMessageBroker
public class WebSocketConfig implements WebSocketMessageBrokerConfigurer {

    @Override
    public void registerStompEndpoints(StompEndpointRegistry registry) {
        registry.addEndpoint("/ws").setAllowedOrigins("*").withSockJS();
    }

    @Override
    public void configureMessageBroker(MessageBrokerRegistry registry) {
        registry.enableSimpleBroker("/topic");
        registry.setApplicationDestinationPrefixes("/app");
    }
}

================
File: src/main/java/com/emse/integrativecps2/controller/RuleController.java
================
////package com.emse.integrativecps2.controller;
////
////import com.emse.integrativecps2.service.RuleService;
////import org.springframework.beans.factory.annotation.Autowired;
////import org.springframework.web.bind.annotation.GetMapping;
////import org.springframework.web.bind.annotation.RequestParam;
////import org.springframework.web.bind.annotation.RestController;
////import java.io.IOException;
////import java.util.Map;
////
////@RestController
////public class RuleController {
////
////    @Autowired
////    private RuleService ruleService;
////
////    @GetMapping("/weather/rules")
////    public Map<String, String> getWeatherRules(@RequestParam String location) throws IOException {
////        return ruleService.evaluateWeatherRules(location);
////    }
////}
//
//package com.emse.integrativecps2.controller;
//
//import com.emse.integrativecps2.model.RuleDto;
//import com.emse.integrativecps2.service.RuleService;
//import org.springframework.beans.factory.annotation.Autowired;
//import org.springframework.web.bind.annotation.*;
//
//import java.util.List;
//
//@RestController
//@RequestMapping("/rules")
//public class RuleController {
//
//    @Autowired
//    private RuleService ruleService;
//
//    @PostMapping
//    public String addRule(@RequestBody RuleDto rule) {
//        ruleService.addRule(rule);
//        return "Rule added successfully!";
//    }
//
//    @DeleteMapping("/{id}")
//    public String removeRule(@PathVariable String id) {
//        ruleService.removeRule(id);
//        return "Rule removed successfully!";
//    }
//
//    @GetMapping
//    public List<RuleDto> getRules() {
//        return ruleService.getRules();
//    }
//}
//
package com.emse.integrativecps2.controller;

import com.emse.integrativecps2.entity.Rule;
import com.emse.integrativecps2.service.RuleService;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.web.bind.annotation.*;

import java.util.List;

@RestController
@RequestMapping("/rules")
public class RuleController {

    @Autowired
    private RuleService ruleService;

    @PostMapping
    public Rule addRule(@RequestBody Rule rule) {
        return ruleService.addRule(rule);
    }

    @DeleteMapping("/{id}")
    public String removeRule(@PathVariable Long id) {
        ruleService.removeRule(id);
        return "Rule removed successfully!";
    }

    @GetMapping
    public List<Rule> getRules() {
        return ruleService.getRules();
    }
}

================
File: src/main/java/com/emse/integrativecps2/controller/SensorController.java
================
////package com.emse.integrativecps2.controller;
////
////
////import com.emse.integrativecps2.model.SensorDto;
////import com.emse.integrativecps2.service.SensorService;
////import org.springframework.beans.factory.annotation.Autowired;
////import org.springframework.web.bind.annotation.*;
////
////@RestController
////@RequestMapping("/sensor")
////public class SensorController {
////
////    @Autowired
////    private SensorService sensorService;
////
////    @PostMapping("/data")
////    public String receiveSensorData(@RequestBody SensorDto data) {
////        sensorService.processSensorData(data);
////        return "Sensor data received successfully!";
////    }
////
////    @GetMapping("/latest")
////    public SensorDto getLatestSensorData() {
////        return sensorService.getLatestSensorData();
////    }
////}
//
//package com.emse.integrativecps2.controller;
//
//import com.emse.integrativecps2.model.SensorDto;
//import com.emse.integrativecps2.service.SensorService;
//import org.springframework.beans.factory.annotation.Autowired;
//import org.springframework.web.bind.annotation.*;
//
//@RestController
//@RequestMapping("/sensor")
//public class SensorController {
//
//    @Autowired
//    private SensorService sensorService;
//
//    @GetMapping
//    public SensorDto getSensorData() {
//        return sensorService.getSensorDataFromCoap();
//    }
//}
//

package com.emse.integrativecps2.controller;

import com.emse.integrativecps2.entity.SensorData;
import com.emse.integrativecps2.service.SensorService;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.web.bind.annotation.*;

@RestController
@RequestMapping("/sensor")
public class SensorController {

    @Autowired
    private SensorService sensorService;

    @PostMapping("/data")
    public SensorData receiveSensorData(@RequestBody SensorData sensor) {
        return sensorService.saveSensorData(sensor);
    }

    @GetMapping("/latest")
    public SensorData getLatestSensorData() {
        return sensorService.getLatestSensorData();
    }
}

================
File: src/main/java/com/emse/integrativecps2/controller/SensorRuleController.java
================
package com.emse.integrativecps2.controller;

import com.emse.integrativecps2.entity.SensorRule;
import com.emse.integrativecps2.service.SensorRuleService;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.web.bind.annotation.*;

import java.util.List;

@RestController
@RequestMapping("/sensor/rules")
public class SensorRuleController {

    @Autowired
    private SensorRuleService sensorRuleService;

    @PostMapping
    public String addSensorRule(@RequestBody SensorRule rule) {
        sensorRuleService.addSensorRule(rule);
        return "Sensor rule saved successfully!";
    }

    @GetMapping
    public List<SensorRule> getAllSensorRules() {
        return sensorRuleService.getAllSensorRules();
    }
}

================
File: src/main/java/com/emse/integrativecps2/controller/WeatherController.java
================
//package com.emse.integrativecps2.controller;
//
//import com.emse.integrativecps2.service.WeatherService;
//import org.springframework.beans.factory.annotation.Autowired;
//import org.springframework.web.bind.annotation.GetMapping;
//import org.springframework.web.bind.annotation.RequestParam;
//import org.springframework.web.bind.annotation.RestController;
//import java.io.IOException;
//
//@RestController
//public class WeatherController {
//
//    @Autowired
//    private WeatherService weatherService;
//
//    @GetMapping("/weather/current")
//    public String getCurrentWeather(@RequestParam String location) throws IOException {
//        return weatherService.getCurrentWeather(location);
//    }
//}

package com.emse.integrativecps2.controller;
import com.emse.integrativecps2.service.WeatherService;
import org.springframework.messaging.handler.annotation.SendTo;
import org.springframework.scheduling.annotation.Scheduled;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.client.RestTemplate;
import org.springframework.messaging.simp.SimpMessagingTemplate;
import java.io.IOException;

//@RestController
//@RequestMapping("/weather")
//public class WeatherController {
//
//    private final WeatherService weatherService;
//    private final SimpMessagingTemplate messagingTemplate;
//
//    public WeatherController(WeatherService weatherService, SimpMessagingTemplate messagingTemplate) {
//        this.weatherService = weatherService;
//        this.messagingTemplate = messagingTemplate;
//    }
//
//    @GetMapping("/current")
//    public String getCurrentWeather(@RequestParam String location) throws IOException {
//        return weatherService.getCurrentWeather(location);
//    }
//
//    @Scheduled(fixedRate = 10000) // Send updates every 10 seconds
//    public void sendWeatherUpdates() throws IOException {
//        String location = "45.764,4.835"; // Example: Lyon's coordinates
//        String weatherData = weatherService.getCurrentWeather(location);
//        messagingTemplate.convertAndSend("/topic/weather", weatherData);
//    }
//}

import org.springframework.beans.factory.annotation.Autowired;


@RestController
@RequestMapping("/weather")
public class WeatherController {

    @Autowired
    private WeatherService weatherService;

    @Autowired
    private SimpMessagingTemplate messagingTemplate;

    private String currentLocation = "45.758,4.832"; // Default: SE

    @GetMapping("/current")
    public String getCurrentWeather(@RequestParam String location) throws IOException {
        currentLocation = location; // Store new location
        return weatherService.getCurrentWeather(location);
    }

    @Scheduled(fixedRate = 10000) // Update every 10s
    public void sendWeatherUpdates() throws IOException {
        String weatherData = weatherService.getCurrentWeather(currentLocation);
        messagingTemplate.convertAndSend("/topic/weather", weatherData);
    }
}

================
File: src/main/java/com/emse/integrativecps2/controller/WeatherRuleController.java
================
package com.emse.integrativecps2.controller;

import com.emse.integrativecps2.entity.WeatherRule;
import com.emse.integrativecps2.service.WeatherRuleService;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.web.bind.annotation.*;

import java.util.List;

@RestController
@RequestMapping("/weather/rules")
public class WeatherRuleController {

    @Autowired
    private WeatherRuleService weatherRuleService;

    @PostMapping
    public String addWeatherRule(@RequestBody WeatherRule rule) {
        weatherRuleService.addWeatherRule(rule);
        return "Weather rule saved successfully!";
    }

    @GetMapping
    public List<WeatherRule> getAllWeatherRules() {
        return weatherRuleService.getAllWeatherRules();
    }
}

================
File: src/main/java/com/emse/integrativecps2/entity/Notification.java
================
package com.emse.integrativecps2.entity;

import jakarta.persistence.*;
import lombok.Data;
import java.time.LocalDateTime;

@Entity
@Data
@Table(name = "notifications")
public class Notification {
    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    private Long id;

    private String recipientEmail;
    private String subject;

    @Column(columnDefinition = "TEXT")
    private String message;

    @Column(nullable = false, updatable = false)
    private LocalDateTime sentAt = LocalDateTime.now();
}

================
File: src/main/java/com/emse/integrativecps2/entity/Rule.java
================
package com.emse.integrativecps2.entity;

import jakarta.persistence.*;
import lombok.Data;

@Entity
@Table(name = "rules")
@Data
public class Rule {
    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    private Long id;

    private String triggerType;
    private String condition;
    private double threshold;
    private String action;
}

================
File: src/main/java/com/emse/integrativecps2/entity/SensorData.java
================
package com.emse.integrativecps2.entity;

import jakarta.persistence.*;
import lombok.Data;

@Entity
@Table(name = "sensor_data")
@Data
public class SensorData {
    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    private Long id;

    private double temperature;
    private double humidity;
    private double airQuality;
}

================
File: src/main/java/com/emse/integrativecps2/entity/SensorRule.java
================
package com.emse.integrativecps2.entity;

import jakarta.persistence.*;
import lombok.Data;

@Entity
@Data
@Table(name = "sensor_rules")
public class SensorRule {
    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    private Long id;

    private String email;
    private String triggerType; // e.g., "temperature", "humidity"
    private String condition; // ">", "<", "=="
    private double threshold;
}

================
File: src/main/java/com/emse/integrativecps2/entity/WeatherData.java
================
package com.emse.integrativecps2.entity;

import jakarta.persistence.*;
import lombok.Data;
import java.time.LocalDateTime;

@Entity
@Data
@Table(name = "weather_data")
public class WeatherData {
    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    private Long id;

    private String location;
    private double temperature;
    private double humidity;
    private String weatherDescription;

    @Column(nullable = false, updatable = false)
    private LocalDateTime recordedAt = LocalDateTime.now();
}

================
File: src/main/java/com/emse/integrativecps2/entity/WeatherRule.java
================
package com.emse.integrativecps2.entity;

import jakarta.persistence.*;
import lombok.Data;

@Entity
@Data
@Table(name = "weather_rules")
public class WeatherRule {
    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    private Long id;

    private String email;  // Email to send alerts
    private String triggerType; // e.g., temperature, humidity
    private String condition; // >, <, ==
    private double threshold; // Setpoint value
}

================
File: src/main/java/com/emse/integrativecps2/model/RuleDto.java
================
package com.emse.integrativecps2.model;
import lombok.Data;

@Data

public class RuleDto {
    private String id;
    private String triggerType; // e.g., "temperature", "humidity"
    private String condition; // e.g., ">", "<", "=="
    private double threshold; // Value for comparison
    private String action; // e.g., "TURN_ON_FAN", "SEND_ALERT"
}

================
File: src/main/java/com/emse/integrativecps2/model/SensorDto.java
================
package com.emse.integrativecps2.model;

import lombok.Data;

@Data
public class SensorDto {
    private double temperature;
    private double humidity;
    private double airQuality;
}

================
File: src/main/java/com/emse/integrativecps2/repository/NotificationRepository.java
================
package com.emse.integrativecps2.repository;

import com.emse.integrativecps2.entity.Notification;
import org.springframework.data.jpa.repository.JpaRepository;
import org.springframework.stereotype.Repository;

@Repository
public interface NotificationRepository extends JpaRepository<Notification, Long> {
}

================
File: src/main/java/com/emse/integrativecps2/repository/RuleRepository.java
================
package com.emse.integrativecps2.repository;

import com.emse.integrativecps2.entity.Rule;
import org.springframework.data.jpa.repository.JpaRepository;

import org.springframework.stereotype.Repository;

@Repository
public interface RuleRepository extends JpaRepository<Rule, Long> {
}

================
File: src/main/java/com/emse/integrativecps2/repository/SensorDataRepository.java
================
package com.emse.integrativecps2.repository;

import com.emse.integrativecps2.entity.SensorData;
import org.springframework.data.jpa.repository.JpaRepository;
import org.springframework.stereotype.Repository;

@Repository
public interface SensorDataRepository extends JpaRepository<SensorData, Long> {
}

================
File: src/main/java/com/emse/integrativecps2/repository/SensorRuleRepository.java
================
package com.emse.integrativecps2.repository;

import com.emse.integrativecps2.entity.SensorRule;
import org.springframework.data.jpa.repository.JpaRepository;
import org.springframework.stereotype.Repository;

@Repository
public interface SensorRuleRepository extends JpaRepository<SensorRule, Long> {
}

================
File: src/main/java/com/emse/integrativecps2/repository/WeatherDataRepository.java
================
package com.emse.integrativecps2.repository;

import com.emse.integrativecps2.entity.WeatherData;
import org.springframework.data.jpa.repository.JpaRepository;
import org.springframework.stereotype.Repository;

@Repository
public interface WeatherDataRepository extends JpaRepository<WeatherData, Long> {
}

================
File: src/main/java/com/emse/integrativecps2/repository/WeatherRuleRepository.java
================
package com.emse.integrativecps2.repository;

import com.emse.integrativecps2.entity.WeatherRule;
import org.springframework.data.jpa.repository.JpaRepository;
import org.springframework.stereotype.Repository;

@Repository
public interface WeatherRuleRepository extends JpaRepository<WeatherRule, Long> {
}

================
File: src/main/java/com/emse/integrativecps2/service/NotificationService.java
================
package com.emse.integrativecps2.service;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.mail.SimpleMailMessage;
import org.springframework.mail.javamail.JavaMailSender;
import org.springframework.stereotype.Service;

@Service
public class NotificationService {

    @Autowired
    private JavaMailSender mailSender;

    /**
     * Sends an email notification.
     * @param to Recipient email address
     * @param subject Email subject
     * @param message Email body content
     */
    public void sendEmail(String to, String subject, String message) {
        SimpleMailMessage mailMessage = new SimpleMailMessage();
        mailMessage.setTo(to);
        mailMessage.setSubject(subject);
        mailMessage.setText(message);

        mailSender.send(mailMessage);
        System.out.println("✅ Email sent to " + to);
    }
}

================
File: src/main/java/com/emse/integrativecps2/service/RuleService.java
================
////package com.emse.integrativecps2.service;
////
////
////import com.emse.integrativecps2.model.SensorDto;
////import org.springframework.stereotype.Service;
////import java.util.HashMap;
////import java.util.Map;
////
////@Service
////public class RuleService {
////
////    public Map<String, String> evaluateSensorRules(SensorDto data) {
////        Map<String, String> actions = new HashMap<>();
////
////        if (data.getTemperature() > 30) {
////            actions.put("Cooling System", "Turn ON");
////        } else if (data.getTemperature() < 5) {
////            actions.put("Heating System", "Turn ON");
////        }
////
////        if (data.getHumidity() > 70) {
////            actions.put("Dehumidifier", "Activate");
////        }
////
////        if (data.getAirQuality() < 50) {
////            actions.put("Air Purifier", "Turn ON");
////        }
////
////        return actions;
////    }
////}
//
//package com.emse.integrativecps2.service;
//
//import com.emse.integrativecps2.model.RuleDto;
//import com.emse.integrativecps2.model.SensorDto;
//import org.springframework.beans.factory.annotation.Autowired;
//import org.springframework.stereotype.Service;
//import org.springframework.scheduling.annotation.Scheduled;
//import java.util.ArrayList;
//import java.util.List;
//
//@Service
//public class RuleService {
//    private final List<RuleDto> rules = new ArrayList<>();
//
//    private SensorService sensorService; // Inject SensorService
//
//    private NotificationService notificationService;
//
//    public void addRule(RuleDto rule) {
//        rules.add(rule);
//    }
//
//    public void removeRule(String ruleId) {
//        rules.removeIf(rule -> rule.getId().equals(ruleId));
//    }
//
//    public List<RuleDto> getRules() {
//        return rules;
//    }
//
//    // Evaluates all rules based on sensor data
//    public void evaluateRules(SensorDto sensorData) {
//        for (RuleDto rule : rules) {
//            if (isConditionMet(rule, sensorData)) {
//                executeAction(rule.getAction());
//            }
//
//            // Send email notification
//            String message = "🚀 Rule Triggered: " + rule.getTriggerType() + " " +
//                    rule.getCondition() + " " + rule.getThreshold() +
//                    "\n📌 Action: " + rule.getAction();
//
//            notificationService.sendEmail("user@example.com", "Rule Triggered Alert", message);
//        }
//    }
//
//    private boolean isConditionMet(RuleDto rule, SensorDto sensorData) {
//        double value;
//        switch (rule.getTriggerType()) {
//            case "temperature":
//                value = sensorData.getTemperature();
//                break;
//            case "humidity":
//                value = sensorData.getHumidity();
//                break;
//            default:
//                return false;
//        }
//
//        return switch (rule.getCondition()) {
//            case ">" -> value > rule.getThreshold();
//            case "<" -> value < rule.getThreshold();
//            case "==" -> value == rule.getThreshold();
//            default -> false;
//        };
//    }
//
//    private void executeAction(String action) {
//        System.out.println("Executing Action: " + action);
//        // Add real action execution logic (e.g., control a device, send a notification)
//
//    }
//
//    // Scheduled task to trigger rule evaluation every 10 seconds
//    @Scheduled(fixedRate = 10000)
//    public void scheduledRuleEvaluation() {
//        System.out.println("Scheduled Rule Evaluation Running...");
//        // Here you should fetch the latest sensor data from SensorService
//
//        SensorDto latestData = sensorService.getSensorDataFromCoap(); // Fetch latest data
//        if (latestData != null) {
//            evaluateRules(latestData); // Evaluate rules
//        } else {
//            System.out.println("⚠️ No sensor data available for rule evaluation.");
//        }
//    }
//}
//

package com.emse.integrativecps2.service;

import com.emse.integrativecps2.entity.Rule;
import com.emse.integrativecps2.entity.SensorData;
import com.emse.integrativecps2.repository.RuleRepository;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import java.util.List;

@Service
public class RuleService {

    @Autowired
    private RuleRepository ruleRepository;

    public Rule addRule(Rule rule) {
        return ruleRepository.save(rule);
    }

    public void removeRule(Long ruleId) {
        ruleRepository.deleteById(ruleId);
    }

    public List<Rule> getRules() {
        return ruleRepository.findAll();
    }

    public void evaluateRules(SensorData sensorData) {
        List<Rule> rules = ruleRepository.findAll();
        for (Rule rule : rules) {
            if (isConditionMet(rule, sensorData)) {
                executeAction(rule.getAction());
            }
        }
    }

    private boolean isConditionMet(Rule rule, SensorData sensorData) {
        double value = switch (rule.getTriggerType()) {
            case "temperature" -> sensorData.getTemperature();
            case "humidity" -> sensorData.getHumidity();
            default -> -1;
        };

        return switch (rule.getCondition()) {
            case ">" -> value > rule.getThreshold();
            case "<" -> value < rule.getThreshold();
            case "==" -> value == rule.getThreshold();
            default -> false;
        };
    }

    private void executeAction(String action) {
        System.out.println("Executing Action: " + action);
    }
}

================
File: src/main/java/com/emse/integrativecps2/service/SensorRuleService.java
================
package com.emse.integrativecps2.service;

import com.emse.integrativecps2.entity.SensorRule;
import com.emse.integrativecps2.entity.SensorData;
import com.emse.integrativecps2.repository.SensorRuleRepository;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import java.util.List;

@Service
public class SensorRuleService {

    @Autowired
    private SensorRuleRepository sensorRuleRepository;

    @Autowired
    private NotificationService notificationService;

    public SensorRule addSensorRule(SensorRule rule) {
        return sensorRuleRepository.save(rule);
    }

    public List<SensorRule> getAllSensorRules() {
        return sensorRuleRepository.findAll();
    }

    public void evaluateSensorData(SensorData sensorData) {
        List<SensorRule> rules = sensorRuleRepository.findAll();
        for (SensorRule rule : rules) {
            if (isConditionMet(rule, sensorData)) {
                sendAlert(rule.getEmail(), rule.getTriggerType(), sensorData);
            }
        }
    }

    private boolean isConditionMet(SensorRule rule, SensorData sensorData) {
        double value = switch (rule.getTriggerType()) {
            case "temperature" -> sensorData.getTemperature();
            case "humidity" -> sensorData.getHumidity();
            case "airQuality" -> sensorData.getAirQuality();
            default -> -1;
        };

        return switch (rule.getCondition()) {
            case ">" -> value > rule.getThreshold();
            case "<" -> value < rule.getThreshold();
            case "==" -> value == rule.getThreshold();
            default -> false;
        };
    }

    private void sendAlert(String email, String triggerType, SensorData sensorData) {
        String subject = "Sensor Alert: " + triggerType + " Condition Met";
        String message = "The " + triggerType + " has reached the set threshold.\n\n" +
                "Current Value: " + switch (triggerType) {
            case "temperature" -> sensorData.getTemperature();
            case "humidity" -> sensorData.getHumidity();
            case "airQuality" -> sensorData.getAirQuality();
            default -> "Unknown";
        } +
                "\nLocation: Sensor Device";

        notificationService.sendEmail(email, subject, message);
        System.out.println("📩 Email sent to " + email);
    }
}

================
File: src/main/java/com/emse/integrativecps2/service/SensorService.java
================
//package com.emse.integrativecps2.service;
//
//import com.emse.integrativecps2.entity.SensorData;
//import com.emse.integrativecps2.repository.SensorDataRepository;
//import org.eclipse.californium.core.CoapClient;
//import org.eclipse.californium.core.CoapResponse;
//import org.eclipse.californium.elements.exception.ConnectorException;
//import org.springframework.beans.factory.annotation.Autowired;
//import org.springframework.scheduling.annotation.Scheduled;
//import org.springframework.stereotype.Service;
//import com.fasterxml.jackson.databind.JsonNode;
//import com.fasterxml.jackson.databind.ObjectMapper;
//import java.io.IOException;
//
//@Service
//public class SensorService {
//
//    @Autowired
//    private SensorDataRepository sensorDataRepository;
//
//    @Autowired
//    private RuleService ruleService;
//
//    private static final String COAP_ENDPOINT = "coap://192.168.101.163/sensor";
//    private final CoapClient coapClient = new CoapClient(COAP_ENDPOINT);
//    private final ObjectMapper objectMapper = new ObjectMapper();
//
//    /**
//     * Fetches sensor data from the CoAP device and stores it in the database.
//     */
//    @Scheduled(fixedRate = 10000) // Fetch data every 10 seconds
//    public void fetchAndProcessSensorData() {
//        System.out.println("📡 Fetching sensor data from CoAP endpoint...");
//        try {
//            CoapResponse response = coapClient.get();
//            if (response != null && response.isSuccess()) {
//                String jsonResponse = response.getResponseText();
//                SensorData sensorData = parseSensorData(jsonResponse);
//                saveSensorData(sensorData);
//                System.out.println("✅ Sensor data received and saved: " + jsonResponse);
//            } else {
//                System.err.println("⚠️ Warning: Failed to retrieve sensor data from CoAP server. Response is null or unsuccessful.");
//            }
//        } catch (ConnectorException e) {
//            System.err.println("❌ CoAP ConnectorException: Could not connect to " + COAP_ENDPOINT);
//            e.printStackTrace();
//        } catch (IOException e) {
//            System.err.println("❌ IOException: Error processing sensor data from CoAP.");
//            e.printStackTrace();
//        } catch (Exception e) {
//            System.err.println("❌ Unexpected Error: " + e.getMessage());
//            e.printStackTrace();
//        }
//    }
//
//    /**
//     * Parses the CoAP JSON response into a SensorData object.
//     */
//    private SensorData parseSensorData(String jsonResponse) throws IOException {
//        JsonNode root = objectMapper.readTree(jsonResponse);
//        SensorData sensorData = new SensorData();
//        sensorData.setTemperature(root.get("temperature").asDouble());
//        sensorData.setHumidity(root.get("humidity").asDouble());
//        sensorData.setAirQuality(root.get("airQuality").asDouble());
//        return sensorData;
//    }
//
//    public SensorData saveSensorData(SensorData sensorData) {
//        sensorDataRepository.save(sensorData);
//        ruleService.evaluateRules(sensorData);
//        return sensorData;
//    }
//
//    public SensorData getLatestSensorData() {
//        return sensorDataRepository.findAll().stream().reduce((first, second) -> second).orElse(null);
//    }
//}

package com.emse.integrativecps2.service;

import com.emse.integrativecps2.entity.SensorData;
import com.emse.integrativecps2.repository.SensorDataRepository;
import org.eclipse.californium.core.CoapClient;
import org.eclipse.californium.core.CoapResponse;
import org.eclipse.californium.elements.exception.ConnectorException;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.scheduling.annotation.Scheduled;
import org.springframework.stereotype.Service;
import com.fasterxml.jackson.databind.JsonNode;
import com.fasterxml.jackson.databind.ObjectMapper;
import java.io.IOException;

@Service
public class SensorService {

    @Autowired
    private SensorDataRepository sensorDataRepository;

    @Autowired
    private SensorRuleService sensorRuleService;

    private static final String COAP_ENDPOINT = "coap://192.168.101.163/sensor";
    private final CoapClient coapClient = new CoapClient(COAP_ENDPOINT);
    private final ObjectMapper objectMapper = new ObjectMapper();

    @Scheduled(fixedRate = 10000) // Fetch sensor data every 10s
    public void fetchAndProcessSensorData() {
        System.out.println("📡 Fetching sensor data from CoAP endpoint...");
        try {
            CoapResponse response = coapClient.get();
            if (response != null && response.isSuccess()) {
                SensorData sensorData = parseSensorData(response.getResponseText());
                saveSensorData(sensorData);
            }
        } catch (Exception e) {
            System.err.println("❌ Error retrieving sensor data: " + e.getMessage());
        }
    }

    private SensorData parseSensorData(String jsonResponse) throws IOException {
        JsonNode root = objectMapper.readTree(jsonResponse);
        SensorData sensorData = new SensorData();
        sensorData.setTemperature(root.get("temperature").asDouble());
        sensorData.setHumidity(root.get("humidity").asDouble());
        sensorData.setAirQuality(root.get("airQuality").asDouble());
        return sensorData;
    }

    public SensorData saveSensorData(SensorData sensorData) {
        sensorDataRepository.save(sensorData);
        sensorRuleService.evaluateSensorData(sensorData);
        return sensorData;
    }

    // Add getLatestSensorData() method
    public SensorData getLatestSensorData() {
        return sensorDataRepository.findAll()
                .stream()
                .reduce((first, second) -> second)
                .orElse(null);
    }
}

================
File: src/main/java/com/emse/integrativecps2/service/TimerService.java
================
package com.emse.integrativecps2.service;

import com.emse.integrativecps2.entity.SensorData;
import com.emse.integrativecps2.model.SensorDto;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.scheduling.annotation.Scheduled;
import org.springframework.stereotype.Service;

@Service
public class TimerService {

    @Autowired
    private RuleService ruleService;

    @Autowired
    private SensorService sensorService;

    /**
     * 🔹 Runs every 10 seconds (Fixed Rate)
     * This method fetches sensor data and evaluates rules at a fixed interval.
     */
    @Scheduled(fixedRate = 10000) // Executes every 10 seconds
    public void executeRulesAtFixedRate() {
        System.out.println("⏳ Fixed Rate Execution - Evaluating Rules...");
        fetchAndEvaluateRules();
    }

    /**
     * 🔹 Runs every minute at second 0 (Cron Job)
     * This method runs at specific times using cron expressions.
     */
    @Scheduled(cron = "0 * * * * *") // Runs every minute
    public void executeRulesWithCronJob() {
        System.out.println("⏳ Cron Job Execution - Evaluating Rules...");
        fetchAndEvaluateRules();
    }

    /**
     * Fetches latest sensor data and evaluates rules.
     */
//    private void fetchAndEvaluateRules() {
//        SensorDto latestData = sensorService.getSensorDataFromCoap();
//        if (latestData != null) {
//            ruleService.evaluateRules(latestData);
//        } else {
//            System.out.println("⚠️ No sensor data available for rule evaluation.");
//        }
//    }
        private void fetchAndEvaluateRules() {
            SensorData latestData = sensorService.getLatestSensorData();
            if (latestData != null) {
                ruleService.evaluateRules(latestData);
            } else {
                System.out.println("⚠️ No sensor data available for rule evaluation.");
            }
        }
}

================
File: src/main/java/com/emse/integrativecps2/service/WeatherRuleService.java
================
package com.emse.integrativecps2.service;

import com.emse.integrativecps2.entity.WeatherRule;
import com.emse.integrativecps2.entity.WeatherData;
import com.emse.integrativecps2.repository.WeatherRuleRepository;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import java.util.List;

@Service
public class WeatherRuleService {

    @Autowired
    private WeatherRuleRepository weatherRuleRepository;

    @Autowired
    private NotificationService notificationService;

    public WeatherRule addWeatherRule(WeatherRule rule) {
        return weatherRuleRepository.save(rule);
    }

    public List<WeatherRule> getAllWeatherRules() {
        return weatherRuleRepository.findAll();
    }

    public void evaluateWeatherConditions(WeatherData weatherData) {
        List<WeatherRule> rules = weatherRuleRepository.findAll();
        for (WeatherRule rule : rules) {
            if (isConditionMet(rule, weatherData)) {
                sendAlert(rule.getEmail(), rule.getTriggerType(), weatherData);
            }
        }
    }

    private boolean isConditionMet(WeatherRule rule, WeatherData weatherData) {
        double value = switch (rule.getTriggerType()) {
            case "temperature" -> weatherData.getTemperature();
            case "humidity" -> weatherData.getHumidity();
            default -> -1;
        };

        return switch (rule.getCondition()) {
            case ">" -> value > rule.getThreshold();
            case "<" -> value < rule.getThreshold();
            case "==" -> value == rule.getThreshold();
            default -> false;
        };
    }

    private void sendAlert(String email, String triggerType, WeatherData weatherData) {
        String subject = "Weather Alert: " + triggerType + " Condition Met";
        String message = "The " + triggerType + " has reached the set threshold.\n\n" +
                "Current Value: " + (triggerType.equals("temperature") ? weatherData.getTemperature() : weatherData.getHumidity()) + "\n" +
                "Location: " + weatherData.getLocation();
        notificationService.sendEmail(email, subject, message);
        System.out.println("📩 Email sent to " + email);
    }
}

================
File: src/main/java/com/emse/integrativecps2/service/WeatherService.java
================
//package com.emse.integrativecps2.service;
//
//import org.springframework.stereotype.Service;
//import org.springframework.web.client.RestTemplate;
//import org.springframework.web.util.UriComponentsBuilder;
//import com.fasterxml.jackson.databind.JsonNode;
//import com.fasterxml.jackson.databind.ObjectMapper;
//import java.io.IOException;
//
//@Service
//public class WeatherService {
//
//    private final String API_KEY = "a1b64b3b5cf5cf7a8ec89534a511dd37"; // Replace with your actual OpenWeather API key
//    private final RestTemplate restTemplate = new RestTemplate();
//    private final ObjectMapper objectMapper = new ObjectMapper();
//
//    public String getCurrentWeather(String location) throws IOException {
//        // Split latitude and longitude from the location string (assuming "lat,lon" format)
//        String[] latLon = location.split(",");
//        if (latLon.length != 2) {
//            throw new IllegalArgumentException("Location must be in 'lat,lon' format");
//        }
//
//        String lat = latLon[0].trim();
//        String lon = latLon[1].trim();
//
//        // Construct correct OpenWeather API URL
//        String url = UriComponentsBuilder.fromHttpUrl("https://api.openweathermap.org/data/2.5/weather")
//                .queryParam("lat", lat)
//                .queryParam("lon", lon)
//                .queryParam("appid", API_KEY)  // Use 'appid' instead of 'apiKey'
//                .queryParam("units", "metric") // Returns temperature in Celsius
//                .toUriString();
//
//        // Debugging: Print URL
//        System.out.println("Fetching weather data from: " + url);
//
//        // Make API request
//        String response = restTemplate.getForObject(url, String.class);
//
//        // Parse JSON response
//        JsonNode root = objectMapper.readTree(response);
//
//        return root.toString(); // Return JSON response
//    }
//}


package com.emse.integrativecps2.service;

import com.emse.integrativecps2.entity.WeatherData;
import com.emse.integrativecps2.repository.WeatherDataRepository;
import com.fasterxml.jackson.databind.JsonNode;
import com.fasterxml.jackson.databind.ObjectMapper;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.messaging.simp.SimpMessagingTemplate;
import org.springframework.scheduling.annotation.Scheduled;
import org.springframework.stereotype.Service;
import org.springframework.web.util.UriComponentsBuilder;

import java.io.IOException;

@Service
public class WeatherService {

    private final String API_KEY = "a1b64b3b5cf5cf7a8ec89534a511dd37"; // Replace with actual OpenWeather API key
    private final ObjectMapper objectMapper = new ObjectMapper();

    @Autowired
    private WeatherDataRepository weatherDataRepository;

    @Autowired
    private WeatherRuleService weatherRuleService; // Injected Weather Rule Service

    @Autowired
    private SimpMessagingTemplate messagingTemplate;

    private String currentLocation = "45.758,4.832"; // Default location

    public String getCurrentWeather(String location) throws IOException {
        String[] latLon = location.split(",");
        if (latLon.length != 2) {
            throw new IllegalArgumentException("Location must be in 'lat,lon' format");
        }

        String lat = latLon[0].trim();
        String lon = latLon[1].trim();

        String url = UriComponentsBuilder.fromHttpUrl("https://api.openweathermap.org/data/2.5/weather")
                .queryParam("lat", lat)
                .queryParam("lon", lon)
                .queryParam("appid", API_KEY)
                .queryParam("units", "metric") // Celsius
                .toUriString();

        String response = new org.springframework.web.client.RestTemplate().getForObject(url, String.class);

        WeatherData weatherData = parseWeatherData(response);
        weatherDataRepository.save(weatherData);

        // Evaluate rules
        weatherRuleService.evaluateWeatherConditions(weatherData);

        return response; // Return raw JSON response
    }

    @Scheduled(fixedRate = 10000) // Fetch and check weather every 10s
    public void sendWeatherUpdates() throws IOException {
        String weatherJson = getCurrentWeather(currentLocation);
        WeatherData weatherData = parseWeatherData(weatherJson);

        // Evaluate stored weather rules
        weatherRuleService.evaluateWeatherConditions(weatherData);

        // Send data to WebSocket
        messagingTemplate.convertAndSend("/topic/weather", weatherJson);
    }

    private WeatherData parseWeatherData(String jsonResponse) throws IOException {
        JsonNode root = objectMapper.readTree(jsonResponse);
        WeatherData weatherData = new WeatherData();
        weatherData.setLocation(currentLocation);
        weatherData.setTemperature(root.get("main").get("temp").asDouble());
        weatherData.setHumidity(root.get("main").get("humidity").asDouble());
        weatherData.setWeatherDescription(root.get("weather").get(0).get("description").asText());
        return weatherData;
    }
}

================
File: src/main/java/com/emse/integrativecps2/Integrativecps2Application.java
================
package com.emse.integrativecps2;

import org.springframework.boot.SpringApplication;
import org.springframework.boot.autoconfigure.SpringBootApplication;
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;
import org.springframework.scheduling.annotation.EnableScheduling;
import org.springframework.web.servlet.config.annotation.CorsRegistry;
import org.springframework.web.servlet.config.annotation.WebMvcConfigurer;

@SpringBootApplication
//@EnableScheduling // Enable scheduled rule evaluations for project
public class Integrativecps2Application {
	public static void main(String[] args) {
		SpringApplication.run(Integrativecps2Application.class, args);
	}


//	@Configuration
//	public class CorsConfig {
//		@Bean
//		public WebMvcConfigurer corsConfigurer() {
//			return new WebMvcConfigurer() {
//				@Override
//				public void addCorsMappings(CorsRegistry registry) {
//					registry.addMapping("/**").allowedOrigins("*");
//				}
//			};
//		}
//	}

	// Enable CORS globally for frontend communication
	@Bean
	public WebMvcConfigurer corsConfigurer() {
		return new WebMvcConfigurer() {
			@Override
			public void addCorsMappings(CorsRegistry registry) {
				registry.addMapping("/**") // Allow all endpoints
						.allowedOrigins("*") // Allow requests from any origin (adjust as needed)
						.allowedMethods("GET", "POST", "PUT", "DELETE", "OPTIONS") // Specify allowed methods
						.allowedHeaders("*"); // Allow all headers
			}
		};
	}
}

================
File: src/main/resources/application.properties
================
spring.application.name=integrativecps2

# SMTP Configuration for Sending Emails
spring.mail.host=smtp.gmail.com
spring.mail.port=587
spring.mail.username=your-email@gmail.com
spring.mail.password=your-app-password
spring.mail.properties.mail.smtp.auth=true
spring.mail.properties.mail.smtp.starttls.enable=true
spring.mail.properties.mail.debug=true

## Database Configuration
#spring.datasource.url=jdbc:postgresql://localhost:5432/integrativecps2
#spring.datasource.username=postgres
#spring.datasource.password=1234
#spring.datasource.driver-class-name=org.postgresql.Driver
#
## Hibernate Configuration
#spring.jpa.database-platform=org.hibernate.dialect.PostgreSQLDialect
#spring.jpa.hibernate.ddl-auto=update
#spring.jpa.show-sql=true

# Spring boot : configure H2 datasource
spring.datasource.url=jdbc:h2:mem:integrativecps2;DB_CLOSE_DELAY=-1;DB_CLOSE_ON_EXIT=FALSE
spring.datasource.username=sa
spring.datasource.password=
spring.datasource.driverClassName=org.h2.Driver

# Spring boot : activate H2 console
spring.h2.console.enabled=true
spring.h2.console.path=/console

================
File: src/test/java/com/emse/integrativecps2/Integrativecps2ApplicationTests.java
================
package com.emse.integrativecps2;

import org.junit.jupiter.api.Test;
import org.springframework.boot.test.context.SpringBootTest;

@SpringBootTest
class Integrativecps2ApplicationTests {

	@Test
	void contextLoads() {
	}

}

================
File: .gitattributes
================
/gradlew text eol=lf
*.bat text eol=crlf
*.jar binary

================
File: .gitignore
================
HELP.md
.gradle
build/
!gradle/wrapper/gradle-wrapper.jar
!**/src/main/**/build/
!**/src/test/**/build/

### STS ###
.apt_generated
.classpath
.factorypath
.project
.settings
.springBeans
.sts4-cache
bin/
!**/src/main/**/bin/
!**/src/test/**/bin/

### IntelliJ IDEA ###
.idea
*.iws
*.iml
*.ipr
out/
!**/src/main/**/out/
!**/src/test/**/out/

### NetBeans ###
/nbproject/private/
/nbbuild/
/dist/
/nbdist/
/.nb-gradle/

### VS Code ###
.vscode/

================
File: build.gradle.kts
================
plugins {
	java
	id("org.springframework.boot") version "3.4.2"
	id("io.spring.dependency-management") version "1.1.7"
}

group = "com.emse"
version = "0.0.1-SNAPSHOT"

java {
	toolchain {
		languageVersion = JavaLanguageVersion.of(21)
	}
}

configurations {
	compileOnly {
		extendsFrom(configurations.annotationProcessor.get())
	}
}

repositories {
	mavenCentral()
	maven { url = uri("https://repo.eclipse.org/content/repositories/californium-releases/") } // Californium repository

}

dependencies {
	implementation("org.springframework.boot:spring-boot-starter-data-rest")
	implementation("org.springframework.boot:spring-boot-starter-web")
	implementation("org.springframework.boot:spring-boot-starter-webflux")

//	implementation("org.eclipse.californium:californium-core:3.9.0")
//	implementation("org.eclipse.californium:californium-element-connector:3.9.0"
//	implementation("org.eclipse.californium:californium-element-connector-tcp:3.9.0") // Corrected dependency name
	implementation("org.eclipse.californium:californium-core:3.9.0") // Core CoAP support
	implementation("org.eclipse.californium:californium-proxy2:3.9.0") // Proxy support
	implementation("org.eclipse.californium:element-connector:3.9.0") // Corrected dependency name

	implementation("org.springframework.boot:spring-boot-starter-mail") // For email notifications
	implementation("org.springframework.boot:spring-boot-starter-web") // Needed for REST API

	implementation("org.springframework.boot:spring-boot-starter-websocket")

	implementation("org.springframework.boot:spring-boot-starter-data-jpa")
	implementation("org.postgresql:postgresql")

	implementation("com.h2database:h2") // libs to use a H2 database

	compileOnly("org.projectlombok:lombok")
	annotationProcessor("org.projectlombok:lombok")
	testImplementation("org.springframework.boot:spring-boot-starter-test")
	testImplementation("io.projectreactor:reactor-test")
	testRuntimeOnly("org.junit.platform:junit-platform-launcher")
}

tasks.withType<Test> {
	useJUnitPlatform()
}

================
File: gradlew
================
#!/bin/sh

#
# Copyright © 2015-2021 the original authors.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#      https://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#
# SPDX-License-Identifier: Apache-2.0
#

##############################################################################
#
#   Gradle start up script for POSIX generated by Gradle.
#
#   Important for running:
#
#   (1) You need a POSIX-compliant shell to run this script. If your /bin/sh is
#       noncompliant, but you have some other compliant shell such as ksh or
#       bash, then to run this script, type that shell name before the whole
#       command line, like:
#
#           ksh Gradle
#
#       Busybox and similar reduced shells will NOT work, because this script
#       requires all of these POSIX shell features:
#         * functions;
#         * expansions «$var», «${var}», «${var:-default}», «${var+SET}»,
#           «${var#prefix}», «${var%suffix}», and «$( cmd )»;
#         * compound commands having a testable exit status, especially «case»;
#         * various built-in commands including «command», «set», and «ulimit».
#
#   Important for patching:
#
#   (2) This script targets any POSIX shell, so it avoids extensions provided
#       by Bash, Ksh, etc; in particular arrays are avoided.
#
#       The "traditional" practice of packing multiple parameters into a
#       space-separated string is a well documented source of bugs and security
#       problems, so this is (mostly) avoided, by progressively accumulating
#       options in "$@", and eventually passing that to Java.
#
#       Where the inherited environment variables (DEFAULT_JVM_OPTS, JAVA_OPTS,
#       and GRADLE_OPTS) rely on word-splitting, this is performed explicitly;
#       see the in-line comments for details.
#
#       There are tweaks for specific operating systems such as AIX, CygWin,
#       Darwin, MinGW, and NonStop.
#
#   (3) This script is generated from the Groovy template
#       https://github.com/gradle/gradle/blob/HEAD/platforms/jvm/plugins-application/src/main/resources/org/gradle/api/internal/plugins/unixStartScript.txt
#       within the Gradle project.
#
#       You can find Gradle at https://github.com/gradle/gradle/.
#
##############################################################################

# Attempt to set APP_HOME

# Resolve links: $0 may be a link
app_path=$0

# Need this for daisy-chained symlinks.
while
    APP_HOME=${app_path%"${app_path##*/}"}  # leaves a trailing /; empty if no leading path
    [ -h "$app_path" ]
do
    ls=$( ls -ld "$app_path" )
    link=${ls#*' -> '}
    case $link in             #(
      /*)   app_path=$link ;; #(
      *)    app_path=$APP_HOME$link ;;
    esac
done

# This is normally unused
# shellcheck disable=SC2034
APP_BASE_NAME=${0##*/}
# Discard cd standard output in case $CDPATH is set (https://github.com/gradle/gradle/issues/25036)
APP_HOME=$( cd -P "${APP_HOME:-./}" > /dev/null && printf '%s
' "$PWD" ) || exit

# Use the maximum available, or set MAX_FD != -1 to use that value.
MAX_FD=maximum

warn () {
    echo "$*"
} >&2

die () {
    echo
    echo "$*"
    echo
    exit 1
} >&2

# OS specific support (must be 'true' or 'false').
cygwin=false
msys=false
darwin=false
nonstop=false
case "$( uname )" in                #(
  CYGWIN* )         cygwin=true  ;; #(
  Darwin* )         darwin=true  ;; #(
  MSYS* | MINGW* )  msys=true    ;; #(
  NONSTOP* )        nonstop=true ;;
esac

CLASSPATH=$APP_HOME/gradle/wrapper/gradle-wrapper.jar


# Determine the Java command to use to start the JVM.
if [ -n "$JAVA_HOME" ] ; then
    if [ -x "$JAVA_HOME/jre/sh/java" ] ; then
        # IBM's JDK on AIX uses strange locations for the executables
        JAVACMD=$JAVA_HOME/jre/sh/java
    else
        JAVACMD=$JAVA_HOME/bin/java
    fi
    if [ ! -x "$JAVACMD" ] ; then
        die "ERROR: JAVA_HOME is set to an invalid directory: $JAVA_HOME

Please set the JAVA_HOME variable in your environment to match the
location of your Java installation."
    fi
else
    JAVACMD=java
    if ! command -v java >/dev/null 2>&1
    then
        die "ERROR: JAVA_HOME is not set and no 'java' command could be found in your PATH.

Please set the JAVA_HOME variable in your environment to match the
location of your Java installation."
    fi
fi

# Increase the maximum file descriptors if we can.
if ! "$cygwin" && ! "$darwin" && ! "$nonstop" ; then
    case $MAX_FD in #(
      max*)
        # In POSIX sh, ulimit -H is undefined. That's why the result is checked to see if it worked.
        # shellcheck disable=SC2039,SC3045
        MAX_FD=$( ulimit -H -n ) ||
            warn "Could not query maximum file descriptor limit"
    esac
    case $MAX_FD in  #(
      '' | soft) :;; #(
      *)
        # In POSIX sh, ulimit -n is undefined. That's why the result is checked to see if it worked.
        # shellcheck disable=SC2039,SC3045
        ulimit -n "$MAX_FD" ||
            warn "Could not set maximum file descriptor limit to $MAX_FD"
    esac
fi

# Collect all arguments for the java command, stacking in reverse order:
#   * args from the command line
#   * the main class name
#   * -classpath
#   * -D...appname settings
#   * --module-path (only if needed)
#   * DEFAULT_JVM_OPTS, JAVA_OPTS, and GRADLE_OPTS environment variables.

# For Cygwin or MSYS, switch paths to Windows format before running java
if "$cygwin" || "$msys" ; then
    APP_HOME=$( cygpath --path --mixed "$APP_HOME" )
    CLASSPATH=$( cygpath --path --mixed "$CLASSPATH" )

    JAVACMD=$( cygpath --unix "$JAVACMD" )

    # Now convert the arguments - kludge to limit ourselves to /bin/sh
    for arg do
        if
            case $arg in                                #(
              -*)   false ;;                            # don't mess with options #(
              /?*)  t=${arg#/} t=/${t%%/*}              # looks like a POSIX filepath
                    [ -e "$t" ] ;;                      #(
              *)    false ;;
            esac
        then
            arg=$( cygpath --path --ignore --mixed "$arg" )
        fi
        # Roll the args list around exactly as many times as the number of
        # args, so each arg winds up back in the position where it started, but
        # possibly modified.
        #
        # NB: a `for` loop captures its iteration list before it begins, so
        # changing the positional parameters here affects neither the number of
        # iterations, nor the values presented in `arg`.
        shift                   # remove old arg
        set -- "$@" "$arg"      # push replacement arg
    done
fi


# Add default JVM options here. You can also use JAVA_OPTS and GRADLE_OPTS to pass JVM options to this script.
DEFAULT_JVM_OPTS='"-Xmx64m" "-Xms64m"'

# Collect all arguments for the java command:
#   * DEFAULT_JVM_OPTS, JAVA_OPTS, JAVA_OPTS, and optsEnvironmentVar are not allowed to contain shell fragments,
#     and any embedded shellness will be escaped.
#   * For example: A user cannot expect ${Hostname} to be expanded, as it is an environment variable and will be
#     treated as '${Hostname}' itself on the command line.

set -- \
        "-Dorg.gradle.appname=$APP_BASE_NAME" \
        -classpath "$CLASSPATH" \
        org.gradle.wrapper.GradleWrapperMain \
        "$@"

# Stop when "xargs" is not available.
if ! command -v xargs >/dev/null 2>&1
then
    die "xargs is not available"
fi

# Use "xargs" to parse quoted args.
#
# With -n1 it outputs one arg per line, with the quotes and backslashes removed.
#
# In Bash we could simply go:
#
#   readarray ARGS < <( xargs -n1 <<<"$var" ) &&
#   set -- "${ARGS[@]}" "$@"
#
# but POSIX shell has neither arrays nor command substitution, so instead we
# post-process each arg (as a line of input to sed) to backslash-escape any
# character that might be a shell metacharacter, then use eval to reverse
# that process (while maintaining the separation between arguments), and wrap
# the whole thing up as a single "set" statement.
#
# This will of course break if any of these variables contains a newline or
# an unmatched quote.
#

eval "set -- $(
        printf '%s\n' "$DEFAULT_JVM_OPTS $JAVA_OPTS $GRADLE_OPTS" |
        xargs -n1 |
        sed ' s~[^-[:alnum:]+,./:=@_]~\\&~g; ' |
        tr '\n' ' '
    )" '"$@"'

exec "$JAVACMD" "$@"

================
File: gradlew.bat
================
@rem
@rem Copyright 2015 the original author or authors.
@rem
@rem Licensed under the Apache License, Version 2.0 (the "License");
@rem you may not use this file except in compliance with the License.
@rem You may obtain a copy of the License at
@rem
@rem      https://www.apache.org/licenses/LICENSE-2.0
@rem
@rem Unless required by applicable law or agreed to in writing, software
@rem distributed under the License is distributed on an "AS IS" BASIS,
@rem WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
@rem See the License for the specific language governing permissions and
@rem limitations under the License.
@rem
@rem SPDX-License-Identifier: Apache-2.0
@rem

@if "%DEBUG%"=="" @echo off
@rem ##########################################################################
@rem
@rem  Gradle startup script for Windows
@rem
@rem ##########################################################################

@rem Set local scope for the variables with windows NT shell
if "%OS%"=="Windows_NT" setlocal

set DIRNAME=%~dp0
if "%DIRNAME%"=="" set DIRNAME=.
@rem This is normally unused
set APP_BASE_NAME=%~n0
set APP_HOME=%DIRNAME%

@rem Resolve any "." and ".." in APP_HOME to make it shorter.
for %%i in ("%APP_HOME%") do set APP_HOME=%%~fi

@rem Add default JVM options here. You can also use JAVA_OPTS and GRADLE_OPTS to pass JVM options to this script.
set DEFAULT_JVM_OPTS="-Xmx64m" "-Xms64m"

@rem Find java.exe
if defined JAVA_HOME goto findJavaFromJavaHome

set JAVA_EXE=java.exe
%JAVA_EXE% -version >NUL 2>&1
if %ERRORLEVEL% equ 0 goto execute

echo. 1>&2
echo ERROR: JAVA_HOME is not set and no 'java' command could be found in your PATH. 1>&2
echo. 1>&2
echo Please set the JAVA_HOME variable in your environment to match the 1>&2
echo location of your Java installation. 1>&2

goto fail

:findJavaFromJavaHome
set JAVA_HOME=%JAVA_HOME:"=%
set JAVA_EXE=%JAVA_HOME%/bin/java.exe

if exist "%JAVA_EXE%" goto execute

echo. 1>&2
echo ERROR: JAVA_HOME is set to an invalid directory: %JAVA_HOME% 1>&2
echo. 1>&2
echo Please set the JAVA_HOME variable in your environment to match the 1>&2
echo location of your Java installation. 1>&2

goto fail

:execute
@rem Setup the command line

set CLASSPATH=%APP_HOME%\gradle\wrapper\gradle-wrapper.jar


@rem Execute Gradle
"%JAVA_EXE%" %DEFAULT_JVM_OPTS% %JAVA_OPTS% %GRADLE_OPTS% "-Dorg.gradle.appname=%APP_BASE_NAME%" -classpath "%CLASSPATH%" org.gradle.wrapper.GradleWrapperMain %*

:end
@rem End local scope for the variables with windows NT shell
if %ERRORLEVEL% equ 0 goto mainEnd

:fail
rem Set variable GRADLE_EXIT_CONSOLE if you need the _script_ return code instead of
rem the _cmd.exe /c_ return code!
set EXIT_CODE=%ERRORLEVEL%
if %EXIT_CODE% equ 0 set EXIT_CODE=1
if not ""=="%GRADLE_EXIT_CONSOLE%" exit %EXIT_CODE%
exit /b %EXIT_CODE%

:mainEnd
if "%OS%"=="Windows_NT" endlocal

:omega

================
File: settings.gradle.kts
================
rootProject.name = "integrativecps2"



================================================================
End of Codebase
================================================================
